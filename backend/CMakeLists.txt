#
# Test main for testing.
#
cmake_minimum_required( VERSION 2.8 )
project(CommBackend)

include_directories(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/../XbeeC/xbee_ansic_library/include/)
include_directories(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/../CommProto/include/)
include_directories(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/../Encryption/cryptopp564/)
include_directories(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/../protobuf/include/)
include_directories(SYSTEM ${CMAKE_CURRENT_SOURCE_DIR}/../poco-1.9/include/)

link_directories(${CMAKE_CURRENT_SOURCE_DIR}/../protobuf/lib)
link_directories(${CMAKE_CURRENT_SOURCE_DIR}/../poco-1.9/lib)


add_executable(CommProtoBackend
 ${CMAKE_CURRENT_SOURCE_DIR}/CommProtocolBackend.cpp 
 ${CMAKE_CURRENT_SOURCE_DIR}/UGVMessage.pb.cc
 ${CMAKE_CURRENT_SOURCE_DIR}/UGVMessage.pb.h
 ${CMAKE_CURRENT_SOURCE_DIR}/ArmCommandXbee.h)

if (CMAKE_VERION VERSION_GREATER 2.8.11)
  target_compile_options(CommProtoBackend PUBLIC -std=c++11)
  set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} " -pthread")
else()
  set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} " -std=c++11 -pthread")
endif()
# Given that linux is different from windows
target_link_libraries(CommProtoBackend CommProtocol-Static)
target_link_libraries(CommProtoBackend cryptopp-static)
target_link_libraries(CommProtoBackend libxbee3)
target_link_libraries(CommProtoBackend libprotobuf)
target_link_libraries(CommProtoBackend PocoFoundation)
target_link_libraries(CommProtoBackend PocoNet)
target_link_libraries(CommProtoBackend PocoUtil)